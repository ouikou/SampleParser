/* Generated By:JJTree&JavaCC: Do not edit this line. TMParserTokenManager.java */
package parser.textmodel.ast;
import java.util.*;

/** Token Manager. */
public class TMParserTokenManager implements TMParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x142L) != 0L)
            return 90;
         if ((active1 & 0x400000201L) != 0L)
            return 51;
         if ((active0 & 0x1fffffffe00000L) != 0L)
         {
            jjmatchedKind = 61;
            return 30;
         }
         if ((active1 & 0x10000000080L) != 0L)
            return 4;
         if ((active0 & 0x6L) != 0L)
            return 91;
         return -1;
      case 1:
         if ((active0 & 0x7fffff7e00000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 61;
               jjmatchedPos = 1;
            }
            return 30;
         }
         if ((active1 & 0x1L) != 0L)
            return 68;
         if ((active0 & 0x18000008000000L) != 0L)
            return 30;
         return -1;
      case 2:
         if ((active1 & 0x1L) != 0L)
            return 62;
         if ((active0 & 0x6000000000000L) != 0L)
            return 30;
         if ((active0 & 0x1ffffffe00000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 2;
            return 30;
         }
         return -1;
      case 3:
         if ((active0 & 0x1ffffe00000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 3;
            return 30;
         }
         if ((active0 & 0x1fe0000000000L) != 0L)
            return 30;
         return -1;
      case 4:
         if ((active0 & 0x7ffe00000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 4;
            return 30;
         }
         if ((active0 & 0x1f800000000L) != 0L)
            return 30;
         return -1;
      case 5:
         if ((active0 & 0x7e00000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 5;
            return 30;
         }
         if ((active0 & 0x7f8000000L) != 0L)
            return 30;
         return -1;
      case 6:
         if ((active0 & 0x6000000L) != 0L)
            return 30;
         if ((active0 & 0x1e00000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 6;
            return 30;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 9:
         return jjStartNfaWithStates_0(0, 2, 91);
      case 32:
         return jjStartNfaWithStates_0(0, 1, 91);
      case 33:
         jjmatchedKind = 103;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000000L);
      case 35:
         return jjStopAtPos(0, 8);
      case 37:
         jjmatchedKind = 99;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400L);
      case 38:
         jjmatchedKind = 87;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x108000L);
      case 40:
         return jjStopAtPos(0, 53);
      case 41:
         return jjStopAtPos(0, 54);
      case 42:
         jjmatchedKind = 70;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x102L);
      case 43:
         jjmatchedKind = 96;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000000800L);
      case 44:
         return jjStopAtPos(0, 60);
      case 45:
         jjmatchedKind = 97;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x22000001000L);
      case 46:
         jjmatchedKind = 104;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80L);
      case 47:
         jjmatchedKind = 98;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x201L);
      case 58:
         return jjStopAtPos(0, 69);
      case 59:
         return jjStopAtPos(0, 59);
      case 60:
         jjmatchedKind = 90;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x50002000L);
      case 61:
         jjmatchedKind = 68;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000000L);
      case 62:
         jjmatchedKind = 91;
         return jjMoveStringLiteralDfa1_0(0x0L, 0xa0004000L);
      case 63:
         return jjStopAtPos(0, 82);
      case 91:
         return jjStopAtPos(0, 57);
      case 93:
         return jjStopAtPos(0, 58);
      case 94:
         jjmatchedKind = 86;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x200000000000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x1000000000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x844000200000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x1000000c000000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x120080000000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x2008000000000L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x1000000000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0xc000000000000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x80000000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x40800000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x10730000000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x2000000L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x2001000000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x400000400000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x800000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 55);
      case 124:
         jjmatchedKind = 85;
         return jjMoveStringLiteralDfa1_0(0x0L, 0xa0000L);
      case 125:
         return jjStopAtPos(0, 56);
      case 126:
         return jjStopAtPos(0, 102);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active1 & 0x100000L) != 0L)
            return jjStopAtPos(1, 84);
         break;
      case 42:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1L);
      case 43:
         if ((active1 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 100);
         break;
      case 45:
         if ((active1 & 0x2000000000L) != 0L)
            return jjStopAtPos(1, 101);
         break;
      case 46:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80L);
      case 47:
         if ((active1 & 0x2L) != 0L)
            return jjStopAtPos(1, 65);
         break;
      case 60:
         if ((active1 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 94;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2000L);
      case 61:
         if ((active1 & 0x100L) != 0L)
            return jjStopAtPos(1, 72);
         else if ((active1 & 0x200L) != 0L)
            return jjStopAtPos(1, 73);
         else if ((active1 & 0x400L) != 0L)
            return jjStopAtPos(1, 74);
         else if ((active1 & 0x800L) != 0L)
            return jjStopAtPos(1, 75);
         else if ((active1 & 0x1000L) != 0L)
            return jjStopAtPos(1, 76);
         else if ((active1 & 0x8000L) != 0L)
            return jjStopAtPos(1, 79);
         else if ((active1 & 0x10000L) != 0L)
            return jjStopAtPos(1, 80);
         else if ((active1 & 0x20000L) != 0L)
            return jjStopAtPos(1, 81);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 88);
         else if ((active1 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 89);
         else if ((active1 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 92);
         else if ((active1 & 0x20000000L) != 0L)
            return jjStopAtPos(1, 93);
         break;
      case 62:
         if ((active1 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x20000000000L) != 0L)
            return jjStopAtPos(1, 105);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4000L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x44800000L, active1, 0L);
      case 102:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 51, 30);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x810800000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x410000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x28000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x4102001000000L, active1, 0L);
      case 111:
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x3484008600000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x300000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000L, active1, 0L);
      case 124:
         if ((active1 & 0x80000L) != 0L)
            return jjStopAtPos(1, 83);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 42:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(2, 64, 62);
         break;
      case 46:
         if ((active1 & 0x80L) != 0L)
            return jjStopAtPos(2, 71);
         break;
      case 61:
         if ((active1 & 0x2000L) != 0L)
            return jjStopAtPos(2, 77);
         else if ((active1 & 0x4000L) != 0L)
            return jjStopAtPos(2, 78);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x800200000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x400800000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x402820000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x84000200000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x18000000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000L, active1, 0L);
      case 114:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 49, 30);
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x60001000000L, active1, 0L);
      case 116:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 50, 30);
         return jjMoveStringLiteralDfa3_0(active0, 0x12000c0000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x100008000000L, active1, 0L);
      case 122:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x9004400000L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000L);
      case 100:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 46, 30);
         break;
      case 101:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 41, 30);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 42, 30);
         return jjMoveStringLiteralDfa4_0(active0, 0x92000000L);
      case 103:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 43, 30);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x1800000L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000L);
      case 109:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 44, 30);
         break;
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000L);
      case 111:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 45, 30);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 48, 30);
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000L);
      case 114:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 47, 30);
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x220200000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x140000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x120000000L);
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000L);
      case 101:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(4, 35, 30);
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x200200000L);
      case 107:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 36, 30);
         break;
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000L);
      case 110:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 37, 30);
         break;
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0xc0000000L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000L);
      case 116:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 38, 30);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 39, 30);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 40, 30);
         return jjMoveStringLiteralDfa5_0(active0, 0x400000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 99:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(5, 33, 30);
         break;
      case 100:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(5, 34, 30);
         break;
      case 101:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(5, 27, 30);
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000L);
      case 102:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(5, 28, 30);
         break;
      case 104:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(5, 29, 30);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000L);
      case 110:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(5, 30, 30);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(5, 31, 30);
         return jjMoveStringLiteralDfa6_0(active0, 0x1200000L);
      case 116:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(5, 32, 30);
         return jjMoveStringLiteralDfa6_0(active0, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x1800000L);
      case 102:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(6, 25, 30);
         break;
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000L);
      case 116:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(6, 26, 30);
         break;
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(7, 24, 30);
         break;
      case 101:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(7, 21, 30);
         else if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(7, 22, 30);
         break;
      case 114:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(7, 23, 30);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0x1ff00000fffffffeL, 0xffffffffffffc000L, 0xffffffffL, 0x600000000000000L
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec5 = {
   0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec6 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L
};
static final long[] jjbitVec7 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x0L, 0x0L
};
static final long[] jjbitVec8 = {
   0x3fffffffffffL, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec9 = {
   0x7fffffe00000000L, 0x7fffffeL, 0x0L, 0x0L
};
static final long[] jjbitVec10 = {
   0x7fffffe03ff0000L, 0x7fffffeL, 0x0L, 0x0L
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 90;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 51:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 68;
                  else if (curChar == 47)
                     jjCheckNAddStates(0, 2);
                  if (curChar == 42)
                     jjCheckNAdd(57);
                  break;
               case 90:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(80, 87);
                  else if (curChar == 42)
                     jjCheckNAddStates(3, 5);
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(72, 78);
                  else if (curChar == 42)
                     jjCheckNAddStates(6, 8);
                  break;
               case 91:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(80, 87);
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(72, 78);
                  break;
               case 68:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(57, 58);
                  else if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(9, 15);
                  else if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(16, 19);
                  else if (curChar == 42)
                     jjCheckNAddStates(20, 25);
                  else if (curChar == 47)
                     jjAddStates(26, 28);
                  else if (curChar == 36)
                  {
                     if (kind > 61)
                        kind = 61;
                     jjCheckNAdd(30);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(29, 31);
                  else if (curChar == 39)
                     jjAddStates(32, 33);
                  else if (curChar == 46)
                     jjCheckNAdd(4);
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 13)
                        kind = 13;
                     jjCheckNAddTwoStates(1, 2);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 13)
                        kind = 13;
                     jjCheckNAddStates(34, 36);
                  }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 3:
                  if (curChar == 46)
                     jjCheckNAdd(4);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 17)
                     kind = 17;
                  jjCheckNAddStates(37, 39);
                  break;
               case 6:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(7);
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 17)
                     kind = 17;
                  jjCheckNAddTwoStates(7, 8);
                  break;
               case 9:
                  if (curChar == 39)
                     jjAddStates(32, 33);
                  break;
               case 10:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 11:
                  if (curChar == 39 && kind > 19)
                     kind = 19;
                  break;
               case 13:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 14:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(15, 11);
                  break;
               case 15:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 16:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 17:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(15);
                  break;
               case 18:
                  if (curChar == 34)
                     jjCheckNAddStates(29, 31);
                  break;
               case 19:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(29, 31);
                  break;
               case 21:
                  if ((0x8400002400L & l) != 0L)
                     jjCheckNAddStates(29, 31);
                  break;
               case 22:
                  if (curChar == 34 && kind > 20)
                     kind = 20;
                  break;
               case 23:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(40, 43);
                  break;
               case 24:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(29, 31);
                  break;
               case 25:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 26:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(24);
                  break;
               case 27:
                  if (curChar == 10)
                     jjCheckNAddStates(29, 31);
                  break;
               case 28:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if (curChar != 36)
                     break;
                  if (kind > 61)
                     kind = 61;
                  jjCheckNAdd(30);
                  break;
               case 30:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  jjCheckNAdd(30);
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(9, 15);
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(32, 33);
                  break;
               case 33:
                  if (curChar != 46)
                     break;
                  if (kind > 17)
                     kind = 17;
                  jjCheckNAddStates(44, 46);
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 17)
                     kind = 17;
                  jjCheckNAddStates(44, 46);
                  break;
               case 36:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(37);
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 17)
                     kind = 17;
                  jjCheckNAddTwoStates(37, 8);
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(38, 39);
                  break;
               case 40:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(41);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 17)
                     kind = 17;
                  jjCheckNAddTwoStates(41, 8);
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(47, 49);
                  break;
               case 44:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(45);
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(45, 8);
                  break;
               case 46:
                  if (curChar != 48)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAddStates(34, 36);
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAddTwoStates(48, 2);
                  break;
               case 49:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAddTwoStates(49, 2);
                  break;
               case 50:
                  if (curChar == 47)
                     jjAddStates(26, 28);
                  break;
               case 52:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 53:
                  if ((0x2400L & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 54:
                  if (curChar == 10 && kind > 5)
                     kind = 5;
                  break;
               case 55:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 56:
                  if (curChar == 42)
                     jjCheckNAdd(57);
                  break;
               case 57:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(57, 58);
                  break;
               case 58:
                  if (curChar == 42)
                     jjCheckNAddStates(50, 52);
                  break;
               case 59:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(60, 58);
                  break;
               case 60:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(60, 58);
                  break;
               case 61:
                  if (curChar == 47 && kind > 6)
                     kind = 6;
                  break;
               case 62:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(63, 64);
                  break;
               case 63:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(63, 64);
                  break;
               case 64:
                  if (curChar == 42)
                     jjCheckNAddStates(53, 55);
                  break;
               case 65:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(66, 64);
                  break;
               case 66:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(66, 64);
                  break;
               case 67:
                  if (curChar == 47 && kind > 7)
                     kind = 7;
                  break;
               case 69:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 70:
                  if (curChar == 42)
                     jjCheckNAddStates(20, 25);
                  break;
               case 71:
                  if (curChar == 42)
                     jjCheckNAddStates(6, 8);
                  break;
               case 72:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(72, 78);
                  break;
               case 74:
                  if ((0x100000200L & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 79:
                  if (curChar == 42)
                     jjCheckNAddStates(3, 5);
                  break;
               case 80:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(80, 87);
                  break;
               case 82:
                  if ((0x100000200L & l) == 0L)
                     break;
                  if (kind > 67)
                     kind = 67;
                  jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 88:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(16, 19);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 90:
                  if (curChar == 64)
                     jjCheckNAdd(86);
                  if (curChar == 64)
                     jjCheckNAdd(77);
                  break;
               case 91:
                  if (curChar == 64)
                     jjCheckNAdd(86);
                  if (curChar == 64)
                     jjCheckNAdd(77);
                  break;
               case 68:
               case 57:
                  jjCheckNAddTwoStates(57, 58);
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 61)
                        kind = 61;
                     jjCheckNAdd(30);
                  }
                  else if (curChar == 64)
                     jjCheckNAddTwoStates(77, 86);
                  break;
               case 2:
                  if ((0x100000001000L & l) != 0L && kind > 13)
                     kind = 13;
                  break;
               case 5:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(56, 57);
                  break;
               case 8:
                  if ((0x5000000050L & l) != 0L && kind > 17)
                     kind = 17;
                  break;
               case 10:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 12:
                  if (curChar == 92)
                     jjAddStates(58, 60);
                  break;
               case 13:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 19:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(29, 31);
                  break;
               case 20:
                  if (curChar == 92)
                     jjAddStates(61, 64);
                  break;
               case 21:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(29, 31);
                  break;
               case 29:
               case 30:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  jjCheckNAdd(30);
                  break;
               case 35:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(65, 66);
                  break;
               case 39:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(67, 68);
                  break;
               case 43:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(69, 70);
                  break;
               case 47:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(48);
                  break;
               case 48:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAddTwoStates(48, 2);
                  break;
               case 52:
                  jjAddStates(0, 2);
                  break;
               case 59:
               case 60:
                  jjCheckNAddTwoStates(60, 58);
                  break;
               case 63:
                  jjCheckNAddTwoStates(63, 64);
                  break;
               case 65:
               case 66:
                  jjCheckNAddTwoStates(66, 64);
                  break;
               case 73:
                  if (curChar != 101)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 75:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 76:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 77:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 78:
                  if (curChar == 64)
                     jjCheckNAdd(77);
                  break;
               case 81:
                  if (curChar != 109)
                     break;
                  if (kind > 67)
                     kind = 67;
                  jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 83:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 84:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 85:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 86:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 87:
                  if (curChar == 64)
                     jjCheckNAdd(86);
                  break;
               case 89:
                  if (curChar == 64)
                     jjCheckNAddTwoStates(77, 86);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 68:
               case 57:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(57, 58);
                  break;
               case 0:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 61)
                     kind = 61;
                  jjCheckNAdd(30);
                  break;
               case 10:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 19:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(29, 31);
                  break;
               case 30:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 61)
                     kind = 61;
                  jjCheckNAdd(30);
                  break;
               case 52:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(0, 2);
                  break;
               case 59:
               case 60:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(60, 58);
                  break;
               case 63:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(63, 64);
                  break;
               case 65:
               case 66:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(66, 64);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 90 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 9);
      case 92:
         return jjMoveStringLiteralDfa1_1(0xc00L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(1, 10);
         break;
      case 13:
         return jjMoveStringLiteralDfa2_1(active0, 0x800L);
      default :
         return 2;
   }
   return 2;
}
private int jjMoveStringLiteralDfa2_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 2;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 2;
   }
   switch(curChar)
   {
      case 10:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(2, 11);
         break;
      default :
         return 3;
   }
   return 3;
}
static final int[] jjnextStates = {
   52, 53, 55, 79, 80, 87, 71, 72, 78, 32, 33, 38, 39, 42, 43, 8, 
   72, 78, 80, 87, 71, 72, 78, 79, 80, 87, 51, 56, 69, 19, 20, 22, 
   10, 12, 47, 49, 2, 4, 5, 8, 19, 20, 24, 22, 34, 35, 8, 42, 
   43, 8, 58, 59, 61, 64, 65, 67, 6, 7, 13, 14, 16, 21, 23, 25, 
   28, 36, 37, 40, 41, 44, 45, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 51:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 61:
         return ((jjbitVec8[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec9[i2] & l2) != 0L);
      default :
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 51:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 61:
         return ((jjbitVec8[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec10[i2] & l2) != 0L);
      default :
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, "\143\157\156\164\151\156\165\145", 
"\166\157\154\141\164\151\154\145", "\162\145\147\151\163\164\145\162", "\165\156\163\151\147\156\145\144", 
"\164\171\160\145\144\145\146", "\144\145\146\141\165\154\164", "\144\157\165\142\154\145", 
"\163\151\172\145\157\146", "\163\167\151\164\143\150", "\162\145\164\165\162\156", 
"\145\170\164\145\162\156", "\163\164\162\165\143\164", "\163\164\141\164\151\143", 
"\163\151\147\156\145\144", "\167\150\151\154\145", "\142\162\145\141\153", "\165\156\151\157\156", 
"\143\157\156\163\164", "\146\154\157\141\164", "\163\150\157\162\164", "\145\154\163\145", 
"\143\141\163\145", "\154\157\156\147", "\145\156\165\155", "\141\165\164\157", 
"\166\157\151\144", "\143\150\141\162", "\147\157\164\157", "\146\157\162", "\151\156\164", 
"\151\146", "\144\157", "\50", "\51", "\173", "\175", "\133", "\135", "\73", "\54", null, 
null, null, "\57\52\52", "\52\57", null, null, "\75", "\72", "\52", "\56\56\56", 
"\52\75", "\57\75", "\45\75", "\53\75", "\55\75", "\74\74\75", "\76\76\75", "\46\75", 
"\136\75", "\174\75", "\77", "\174\174", "\46\46", "\174", "\136", "\46", "\75\75", 
"\41\75", "\74", "\76", "\74\75", "\76\75", "\74\74", "\76\76", "\53", "\55", "\57", 
"\45", "\53\53", "\55\55", "\176", "\41", "\56", "\55\76", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "PREPROCESSOR_OUTPUT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0x3ffffffffffa2001L, 0x3ffffffffffL, 
};
static final long[] jjtoSkip = {
   0x3feL, 0x0L, 
};
static final long[] jjtoMore = {
   0x1c00L, 0x0L, 
};
protected JavaCharStream input_stream;
private final int[] jjrounds = new int[90];
private final int[] jjstateSet = new int[180];
protected char curChar;
/** Constructor. */
public TMParserTokenManager(JavaCharStream stream){
   if (JavaCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public TMParserTokenManager(JavaCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(JavaCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 90; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(JavaCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 13 && (0x2400L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 12)
         {
            jjmatchedKind = 12;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}

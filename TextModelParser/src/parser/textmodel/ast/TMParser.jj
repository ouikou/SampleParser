/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. TMParser.jj */
/*@egen*//*	Grammar file*//*	JavaCC default options, if you change these add a comment why*/options{                 STATIC = false;                                         DEBUG_PARSER = false;                            JAVA_UNICODE_ESCAPE = true;  OUTPUT_DIRECTORY = "../ast";}PARSER_BEGIN(TMParser)package parser.textmodel.ast;import java.util.*;public class TMParser/*@bgen(jjtree)*/implements TMParserTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected JJTTMParserState jjtree = new JJTTMParserState();

/*@egen*/  // Hastable for storing typedef types  private static Set types = new HashSet();  {    // Hack to include type "special types"    types.add("__signed__");    types.add("__const");    types.add("__inline__");    types.add("__signed");  }  // Stack for determining when the parser  // is parsing a typdef definition.  private static Stack typedefParsingStack = new Stack();  // Returns true if the given string is  // a typedef type.  private static boolean isType(String type)  {    return types.contains(type);  }  // Add a typedef type to those already defined  private static void addType(String type)  {    types.add(type);  }  // Prints out all the types used in parsing the c source  private static void printTypes()  {    for (Iterator i = types.iterator(); i.hasNext();)    {      System.out.println(i.next());    }  }  // Run the parser  public static void main(String args [])  {    TMParser parser;    if (args.length == 0)    {      System.out.println("C Parser:  Reading from standard input . . .");      parser = new TMParser(System.in);    }    else if (args.length == 1)    {      System.out.println("C Parser:  Reading from file " + args [0] + " . . .");      try      {        parser = new TMParser(new java.io.FileInputStream(args [0]));      }      catch (java.io.FileNotFoundException e)      {        System.out.println("C Parser:  File " + args [0] + " not found.");        return;      }    }    else    {      System.out.println("C Parser:  Usage is one of:");      System.out.println("        TMParser < inputfile");      System.out.println("OR");      System.out.println("        TMParser inputfile");      return;    }    try    {      ASTTranslationUnit unit = parser.TranslationUnit();      System.out.println("C Parser:  Parsed successfully.");    }    catch (ParseException e)    {      System.out.println("C Parser:  Encountered errors during parse.");      e.printStackTrace();    }  }}PARSER_END(TMParser)SKIP :{  " "| "\t"| "\n"| "\r"| < "//" (~[ "\n", "\r" ])*    (      "\n"    | "\r"    | "\r\n"    ) >| < "/*" (~[ "*" ])+ "*"    (      "*"    | ~[ "*", "/" ] (~[ "*" ])* "*"    )*    "/" >| < "/***" (~[ "*" ])* "*"    (      "*"    | ~[ "*", "/" ] (~[ "*" ])* "*"    )*    "/" >| "#" : PREPROCESSOR_OUTPUT}< PREPROCESSOR_OUTPUT >SKIP :{  "\n" : DEFAULT}< PREPROCESSOR_OUTPUT >MORE :{  "\\\n"| "\\\r\n"| < ~[ ] >}TOKEN :{  < INTEGER_LITERAL :    < DECIMAL_LITERAL > ([ "l", "L" ])?  | < HEX_LITERAL > ([ "l", "L" ])?  | < OCTAL_LITERAL > ([ "l", "L" ])? >| < #DECIMAL_LITERAL : [ "1"-"9" ] ([ "0"-"9" ])* >| < #HEX_LITERAL : "0" [ "x", "X" ] ([ "0"-"9", "a"-"f", "A"-"F" ])+ >| < #OCTAL_LITERAL : "0" ([ "0"-"7" ])* >| < FLOATING_POINT_LITERAL :    ([ "0"-"9" ])+ "." ([ "0"-"9" ])* (< EXPONENT >)? ([ "f", "F", "d", "D" ])?  | "." ([ "0"-"9" ])+ (< EXPONENT >)? ([ "f", "F", "d", "D" ])?  | ([ "0"-"9" ])+ < EXPONENT > ([ "f", "F", "d", "D" ])?  | ([ "0"-"9" ])+ (< EXPONENT >)? [ "f", "F", "d", "D" ] >| < #EXPONENT : [ "e", "E" ] ([ "+", "-" ])? ([ "0"-"9" ])+ >| < CHARACTER_LITERAL :    "\'"    (      ~[ "\'", "\\", "\n", "\r" ]    | "\\"      (        [ "n", "t", "b", "r", "f", "\\", "\'", "\"" ]      | [ "0"-"7" ] ([ "0"-"7" ])?      | [ "0"-"3" ] [ "0"-"7" ] [ "0"-"7" ]      )    )    "\'" >| < STRING_LITERAL :    "\""    (      ~[ "\"", "\\", "\n", "\r" ]    | "\\"      (        [ "n", "t", "b", "r", "f", "\\", "\'", "\"" ]      | [ "0"-"7" ] ([ "0"-"7" ])?      | [ "0"-"3" ] [ "0"-"7" ] [ "0"-"7" ]      |        (          [ "\n", "\r" ]        | "\r\n"        )      )    )*    "\"" >}TOKEN :{  < CONTINUE : "continue" >| < VOLATILE : "volatile" >| < REGISTER : "register" >| < UNSIGNED : "unsigned" >| < TYPEDEF : "typedef" >| < DFLT : "default" >| < DOUBLE : "double" >| < SIZEOF : "sizeof" >| < SWITCH : "switch" >| < RETURN : "return" >| < EXTERN : "extern" >| < STRUCT : "struct" >| < STATIC : "static" >| < SIGNED : "signed" >| < WHILE : "while" >| < BREAK : "break" >| < UNION : "union" >| < CONST : "const" >| < FLOAT : "float" >| < SHORT : "short" >| < ELSE : "else" >| < CASE : "case" >| < LONG : "long" >| < ENUM : "enum" >| < AUTO : "auto" >| < VOID : "void" >| < CHAR : "char" >| < GOTO : "goto" >| < FOR : "for" >| < INT : "int" >| < IF : "if" >| < DO : "do" >}TOKEN : /* SEPARATORS */{  < LPAREN: "(" >| < RPAREN: ")" >| < LBRACE: "{" >| < RBRACE: "}" >| < LBRACKET: "[" >| < RBRACKET: "]" >| < SEMICOLON: ";" >| < COMMA: "," >}TOKEN :{  < IDENTIFIER :    < LETTER >    (      < LETTER >    | < DIGIT >    )* >| < #LETTER : [ "$", "A"-"Z", "_", "a"-"z", "\u00c0"-"\u00d6", "\u00d8"-"\u00f6", "\u00f8"-"\u00ff", "\u0100"-"\u1fff", "\u3040"-"\u318f", "\u3300"-"\u337f", "\u3400"-"\u3d2d", "\u4e00"-"\u9fff", "\uf900"-"\ufaff", "\uff21"-"\uff3a", "\uff41"-"\uff5a" ] >| < #DIGIT : [ "0"-"9", "\u0660"-"\u0669", "\u06f0"-"\u06f9", "\u0966"-"\u096f", "\u09e6"-"\u09ef", "\u0a66"-"\u0a6f", "\u0ae6"-"\u0aef", "\u0b66"-"\u0b6f", "\u0be7"-"\u0bef", "\u0c66"-"\u0c6f", "\u0ce6"-"\u0cef", "\u0d66"-"\u0d6f", "\u0e50"-"\u0e59", "\u0ed0"-"\u0ed9", "\u1040"-"\u1049", "\uff10"-"\uff19" ] >}/* * \u7e5d\ufffd\u304f\u7e67\uff79\u7e5d\u533b\u0394\u7e5d\ufffd\u039d\u7e67\uff73\u7e5d\uff61\u7e5d\uff73\u7e5d\ufffdParser \u8703\uff66\u9005\ufffd\u5e55\u87cb\ufffd */TOKEN : /* FORMAL_COMMENT */{  < FORMAL_COMMENT_START : "/**" >| < FORMAL_COMMENT_END : "*/" >| < FORMAL_COMMENT_ANNOTATION_KEY_NAME :    ("*")*    (      " "    | "\t"    )*    "@name"    (      " "    | "\t"    )* >| < FORMAL_COMMENT_ANNOTATION_KEY_PARAM :    ("*")*    (      " "    | "\t"    )*    "@param"    (      " "    | "\t"    )* >}void VariableModelComment() :{/*@bgen(jjtree) VariableModelComment */
  ASTVariableModelComment jjtn000 = (ASTVariableModelComment)ASTVariableModelComment.jjtCreate(this, JJTVARIABLEMODELCOMMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) VariableModelComment */
  try {
/*@egen*/  < FORMAL_COMMENT_START > commentAnnoName() < FORMAL_COMMENT_END >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void FunctionModelComment() :{/*@bgen(jjtree) FunctionModelComment */
  ASTFunctionModelComment jjtn000 = (ASTFunctionModelComment)ASTFunctionModelComment.jjtCreate(this, JJTFUNCTIONMODELCOMMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) FunctionModelComment */
  try {
/*@egen*/  < FORMAL_COMMENT_START >  (    commentAnnoName()    (      commentAnnoParam()    )*  )  < FORMAL_COMMENT_END >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void FlowModelComment() :{/*@bgen(jjtree) FlowModelComment */
  ASTFlowModelComment jjtn000 = (ASTFlowModelComment)ASTFlowModelComment.jjtCreate(this, JJTFLOWMODELCOMMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) FlowModelComment */
  try {
/*@egen*/  < FORMAL_COMMENT_START > commentAnnoName() < FORMAL_COMMENT_END >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void commentAnnoName() :{/*@bgen(jjtree) commentAnnoName */
  ASTcommentAnnoName jjtn000 = (ASTcommentAnnoName)ASTcommentAnnoName.jjtCreate(this, JJTCOMMENTANNONAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) commentAnnoName */
  try {
/*@egen*/  < FORMAL_COMMENT_ANNOTATION_KEY_NAME > < IDENTIFIER >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void commentAnnoParam() :{/*@bgen(jjtree) commentAnnoParam */
  ASTcommentAnnoParam jjtn000 = (ASTcommentAnnoParam)ASTcommentAnnoParam.jjtCreate(this, JJTCOMMENTANNOPARAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) commentAnnoParam */
  try {
/*@egen*/  < FORMAL_COMMENT_ANNOTATION_KEY_PARAM > < IDENTIFIER >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}/* \u7e5d\ufffd\u304f\u7e67\uff79\u7e5d\u533b\u0394\u7e5d\ufffd\u039d\u7e67\uff73\u7e5d\uff61\u7e5d\uff73\u7e5d\ufffdParser \u8703\uff66\u9005\ufffd\uff6e\u5fa1\uff7a\ufffd*//* * \u7e5d\ufffd\u304f\u7e67\uff79\u7e5d\u533b\u0394\u7e5d\ufffd\u039d Parser \u8703\uff66\u9005\ufffd\u5e55\u87cb\ufffd */void TextModelDeclaration() :{/*@bgen(jjtree) TextModelDeclaration */
  ASTTextModelDeclaration jjtn000 = (ASTTextModelDeclaration)ASTTextModelDeclaration.jjtCreate(this, JJTTEXTMODELDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) TextModelDeclaration */
  try {
/*@egen*/  (    LOOKAHEAD(FlowModelDefinition())    FlowModelDefinition()  | LOOKAHEAD(VariableModelDeclaration())    VariableModelDeclaration()  | LOOKAHEAD(FunctionModelDeclaration())    FunctionModelDeclaration()  | LOOKAHEAD(FunctionModelDefinition())    FunctionModelDefinition()  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void VariableModelDeclaration() :{/*@bgen(jjtree) VariableModelDeclaration */
  ASTVariableModelDeclaration jjtn000 = (ASTVariableModelDeclaration)ASTVariableModelDeclaration.jjtCreate(this, JJTVARIABLEMODELDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) VariableModelDeclaration */
  try {
/*@egen*/  VariableModelComment() DeclarationSpecifiers() [ VariableInitDeclaratorList() ] < SEMICOLON >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void FunctionModelDeclaration() :{/*@bgen(jjtree) FunctionModelDeclaration */
  ASTFunctionModelDeclaration jjtn000 = (ASTFunctionModelDeclaration)ASTFunctionModelDeclaration.jjtCreate(this, JJTFUNCTIONMODELDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) FunctionModelDeclaration */
  try {
/*@egen*/  FunctionModelComment()  [    LOOKAHEAD(DeclarationSpecifiers())    DeclarationSpecifiers()  ]  FunctionDeclarator() [ FunctionDeclarationList() ] < SEMICOLON >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void FunctionModelDefinition() :{/*@bgen(jjtree) FunctionModelDefinition */
  ASTFunctionModelDefinition jjtn000 = (ASTFunctionModelDefinition)ASTFunctionModelDefinition.jjtCreate(this, JJTFUNCTIONMODELDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) FunctionModelDefinition */
  try {
/*@egen*/  FunctionModelComment()  [    LOOKAHEAD(DeclarationSpecifiers())    DeclarationSpecifiers()  ]  Declarator() [ DeclarationList() ] CompoundStatement()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void FlowModelDefinition() :{/*@bgen(jjtree) FlowModelDefinition */
  ASTFlowModelDefinition jjtn000 = (ASTFlowModelDefinition)ASTFlowModelDefinition.jjtCreate(this, JJTFLOWMODELDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) FlowModelDefinition */
  try {
/*@egen*/  FlowModelComment() CompoundStatement()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}/* \u7e5d\ufffd\u304f\u7e67\uff79\u7e5d\u533b\u0394\u7e5d\ufffd\u039d Parser \u8703\uff66\u9005\ufffd\uff6e\u5fa1\uff7a\ufffd*/ASTTranslationUnit TranslationUnit() :{/*@bgen(jjtree) TranslationUnit */
  ASTTranslationUnit jjtn000 = (ASTTranslationUnit)ASTTranslationUnit.jjtCreate(this, JJTTRANSLATIONUNIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) TranslationUnit */
  try {
/*@egen*/  (    LOOKAHEAD(ExternalDeclaration())    ExternalDeclaration()  | TextModelDeclaration() // \u7e5d\ufffd\u304f\u7e67\uff79\u7e5d\u533b\u0394\u7e5d\ufffd\u039d\u7e3a\uff6e\u9697\uff63\u8b6b\u4ed9\ufffd\u9005\ufffd\uff52\u9711\uff7d\u8709\ufffd\u2606\u7e67\u4e5d\ufffd  )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void ExternalDeclaration() :{/*@bgen(jjtree) ExternalDeclaration */
  ASTExternalDeclaration jjtn000 = (ASTExternalDeclaration)ASTExternalDeclaration.jjtCreate(this, JJTEXTERNALDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ExternalDeclaration */
  try {
/*@egen*/  (    LOOKAHEAD(FunctionDefinition())    FunctionDefinition()  | Declaration()  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void FunctionDefinition() :{/*@bgen(jjtree) FunctionDefinition */
  ASTFunctionDefinition jjtn000 = (ASTFunctionDefinition)ASTFunctionDefinition.jjtCreate(this, JJTFUNCTIONDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) FunctionDefinition */
  try {
/*@egen*/  [    LOOKAHEAD(DeclarationSpecifiers())    DeclarationSpecifiers()  ]  Declarator() [ DeclarationList() ] CompoundStatement()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Declaration() :{/*@bgen(jjtree) Declaration */
  ASTDeclaration jjtn000 = (ASTDeclaration)ASTDeclaration.jjtCreate(this, JJTDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Declaration */
  try {
/*@egen*/  DeclarationSpecifiers() [ InitDeclaratorList() ] < SEMICOLON >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void FunctionDeclaration() :{/*@bgen(jjtree) FunctionDeclaration */
  ASTFunctionDeclaration jjtn000 = (ASTFunctionDeclaration)ASTFunctionDeclaration.jjtCreate(this, JJTFUNCTIONDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) FunctionDeclaration */
  try {
/*@egen*/  DeclarationSpecifiers() [ FunctionInitDeclaratorList() ] < SEMICOLON >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void VariableDeclaration() :{/*@bgen(jjtree) VariableDeclaration */
  ASTVariableDeclaration jjtn000 = (ASTVariableDeclaration)ASTVariableDeclaration.jjtCreate(this, JJTVARIABLEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) VariableDeclaration */
  try {
/*@egen*/  DeclarationSpecifiers() [ VariableInitDeclaratorList() ] < SEMICOLON >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void DeclarationList() :{/*@bgen(jjtree) DeclarationList */
  ASTDeclarationList jjtn000 = (ASTDeclarationList)ASTDeclarationList.jjtCreate(this, JJTDECLARATIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) DeclarationList */
  try {
/*@egen*/  (    LOOKAHEAD(Declaration())    Declaration()  )+/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void FunctionDeclarationList() :{/*@bgen(jjtree) FunctionDeclarationList */
  ASTFunctionDeclarationList jjtn000 = (ASTFunctionDeclarationList)ASTFunctionDeclarationList.jjtCreate(this, JJTFUNCTIONDECLARATIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) FunctionDeclarationList */
  try {
/*@egen*/  (    LOOKAHEAD(FunctionDeclaration())    FunctionDeclaration()  )+/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void VariableDeclarationList() :{/*@bgen(jjtree) VariableDeclarationList */
  ASTVariableDeclarationList jjtn000 = (ASTVariableDeclarationList)ASTVariableDeclarationList.jjtCreate(this, JJTVARIABLEDECLARATIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) VariableDeclarationList */
  try {
/*@egen*/  (    LOOKAHEAD(VariableDeclaration())    VariableDeclaration()  )+/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void DeclarationSpecifiers() :{/*@bgen(jjtree) DeclarationSpecifiers */
  ASTDeclarationSpecifiers jjtn000 = (ASTDeclarationSpecifiers)ASTDeclarationSpecifiers.jjtCreate(this, JJTDECLARATIONSPECIFIERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) DeclarationSpecifiers */
  try {
/*@egen*/  StorageClassSpecifier()  [    LOOKAHEAD(DeclarationSpecifiers())    DeclarationSpecifiers()  ]| TypeSpecifier()  [    LOOKAHEAD(MultiDeclarationSpecifiers())    MultiDeclarationSpecifiers()  ]| TypeQualifier()  [    LOOKAHEAD(DeclarationSpecifiers())    DeclarationSpecifiers()  ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void MultiDeclarationSpecifiers() :{/*@bgen(jjtree) MultiDeclarationSpecifiers */
  ASTMultiDeclarationSpecifiers jjtn000 = (ASTMultiDeclarationSpecifiers)ASTMultiDeclarationSpecifiers.jjtCreate(this, JJTMULTIDECLARATIONSPECIFIERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) MultiDeclarationSpecifiers */
  try {
/*@egen*/  StorageClassSpecifier()  [    LOOKAHEAD(MultiDeclarationSpecifiers())    MultiDeclarationSpecifiers()  ]| MultiTypeSpecifier()  [    LOOKAHEAD(MultiDeclarationSpecifiers())    MultiDeclarationSpecifiers()  ]| TypeQualifier()  [    LOOKAHEAD(MultiDeclarationSpecifiers())    MultiDeclarationSpecifiers()  ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void StorageClassSpecifier() :{/*@bgen(jjtree) StorageClassSpecifier */
  ASTStorageClassSpecifier jjtn000 = (ASTStorageClassSpecifier)ASTStorageClassSpecifier.jjtCreate(this, JJTSTORAGECLASSSPECIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) StorageClassSpecifier */
  try {
/*@egen*/  (    < AUTO >  | < REGISTER >  | < STATIC >  | < EXTERN >  | < TYPEDEF >/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/    {      typedefParsingStack.push(Boolean.TRUE);    }  )/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void TypeSpecifier() :{/*@bgen(jjtree) TypeSpecifier */
  ASTTypeSpecifier jjtn000 = (ASTTypeSpecifier)ASTTypeSpecifier.jjtCreate(this, JJTTYPESPECIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) TypeSpecifier */
  try {
/*@egen*/  (    < VOID >  | < CHAR >  | < SHORT >  | < INT >  | < LONG >  | < FLOAT >  | < DOUBLE >  | < SIGNED >  | < UNSIGNED >  | StructOrUnionSpecifier()  | EnumSpecifier()  | < IDENTIFIER >  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void MultiTypeSpecifier() :{/*@bgen(jjtree) MultiTypeSpecifier */
  ASTMultiTypeSpecifier jjtn000 = (ASTMultiTypeSpecifier)ASTMultiTypeSpecifier.jjtCreate(this, JJTMULTITYPESPECIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) MultiTypeSpecifier */
  try {
/*@egen*/  (    < VOID >  | < CHAR >  | < SHORT >  | < INT >  | < LONG >  | < FLOAT >  | < DOUBLE >  | < SIGNED >  | < UNSIGNED >  | StructOrUnionSpecifier()  | EnumSpecifier()  | LOOKAHEAD({ isType(getToken(1).image) })    TypedefName()  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void TypeQualifier() :{/*@bgen(jjtree) TypeQualifier */
  ASTTypeQualifier jjtn000 = (ASTTypeQualifier)ASTTypeQualifier.jjtCreate(this, JJTTYPEQUALIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) TypeQualifier */
  try {
/*@egen*/  (    < CONST >  | < VOLATILE >  )/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void StructOrUnionSpecifier() :{/*@bgen(jjtree) StructOrUnionSpecifier */
  ASTStructOrUnionSpecifier jjtn000 = (ASTStructOrUnionSpecifier)ASTStructOrUnionSpecifier.jjtCreate(this, JJTSTRUCTORUNIONSPECIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) StructOrUnionSpecifier */
  try {
/*@egen*/  {    typedefParsingStack.push(Boolean.FALSE);  }  StructOrUnion()  (    LOOKAHEAD(3)    [ < IDENTIFIER > ] < LBRACE > StructDeclarationList() < RBRACE >  | < IDENTIFIER >  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    typedefParsingStack.pop();  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void StructOrUnion() :{/*@bgen(jjtree) StructOrUnion */
  ASTStructOrUnion jjtn000 = (ASTStructOrUnion)ASTStructOrUnion.jjtCreate(this, JJTSTRUCTORUNION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) StructOrUnion */
  try {
/*@egen*/  (    < STRUCT >  | < UNION >  )/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void StructDeclarationList() :{/*@bgen(jjtree) StructDeclarationList */
  ASTStructDeclarationList jjtn000 = (ASTStructDeclarationList)ASTStructDeclarationList.jjtCreate(this, JJTSTRUCTDECLARATIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) StructDeclarationList */
  try {
/*@egen*/  (    StructDeclaration()  )+/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void InitDeclaratorList() :{/*@bgen(jjtree) InitDeclaratorList */
  ASTInitDeclaratorList jjtn000 = (ASTInitDeclaratorList)ASTInitDeclaratorList.jjtCreate(this, JJTINITDECLARATORLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) InitDeclaratorList */
  try {
/*@egen*/  InitDeclarator()  (    < COMMA > InitDeclarator()  )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    // Finished with a typedefDeclaration??    if (!(typedefParsingStack.empty()) && ((Boolean) typedefParsingStack.peek()).booleanValue())    {      typedefParsingStack.pop();    }  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void FunctionInitDeclaratorList() :{/*@bgen(jjtree) FunctionInitDeclaratorList */
  ASTFunctionInitDeclaratorList jjtn000 = (ASTFunctionInitDeclaratorList)ASTFunctionInitDeclaratorList.jjtCreate(this, JJTFUNCTIONINITDECLARATORLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) FunctionInitDeclaratorList */
  try {
/*@egen*/  FunctionInitDeclarator()  (    < COMMA > FunctionInitDeclarator()  )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    // Finished with a typedefDeclaration??    if (!(typedefParsingStack.empty()) && ((Boolean) typedefParsingStack.peek()).booleanValue())    {      typedefParsingStack.pop();    }  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void VariableInitDeclaratorList() :{/*@bgen(jjtree) VariableInitDeclaratorList */
  ASTVariableInitDeclaratorList jjtn000 = (ASTVariableInitDeclaratorList)ASTVariableInitDeclaratorList.jjtCreate(this, JJTVARIABLEINITDECLARATORLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) VariableInitDeclaratorList */
  try {
/*@egen*/  VariableInitDeclarator()  (    < COMMA > VariableInitDeclarator()  )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    // Finished with a typedefDeclaration??    if (!(typedefParsingStack.empty()) && ((Boolean) typedefParsingStack.peek()).booleanValue())    {      typedefParsingStack.pop();    }  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void InitDeclarator() :{/*@bgen(jjtree) InitDeclarator */
  ASTInitDeclarator jjtn000 = (ASTInitDeclarator)ASTInitDeclarator.jjtCreate(this, JJTINITDECLARATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) InitDeclarator */
  try {
/*@egen*/  Declarator() [ "=" Initializer() ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void FunctionInitDeclarator() :{/*@bgen(jjtree) FunctionInitDeclarator */
  ASTFunctionInitDeclarator jjtn000 = (ASTFunctionInitDeclarator)ASTFunctionInitDeclarator.jjtCreate(this, JJTFUNCTIONINITDECLARATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) FunctionInitDeclarator */
  try {
/*@egen*/  FunctionDeclarator() [ "=" Initializer() ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void VariableInitDeclarator() :{/*@bgen(jjtree) VariableInitDeclarator */
  ASTVariableInitDeclarator jjtn000 = (ASTVariableInitDeclarator)ASTVariableInitDeclarator.jjtCreate(this, JJTVARIABLEINITDECLARATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) VariableInitDeclarator */
  try {
/*@egen*/  VariableDeclarator() [ "=" Initializer() ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void StructDeclaration() :{/*@bgen(jjtree) StructDeclaration */
  ASTStructDeclaration jjtn000 = (ASTStructDeclaration)ASTStructDeclaration.jjtCreate(this, JJTSTRUCTDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) StructDeclaration */
  try {
/*@egen*/  SpecifierQualifierList() StructDeclaratorList() < SEMICOLON >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void SpecifierQualifierList() :{/*@bgen(jjtree) SpecifierQualifierList */
  ASTSpecifierQualifierList jjtn000 = (ASTSpecifierQualifierList)ASTSpecifierQualifierList.jjtCreate(this, JJTSPECIFIERQUALIFIERLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) SpecifierQualifierList */
  try {
/*@egen*/  TypeSpecifier()  [    LOOKAHEAD(MultiSpecifierQualifierList())    MultiSpecifierQualifierList()  ]| TypeQualifier()  [    LOOKAHEAD(SpecifierQualifierList())    SpecifierQualifierList()  ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void MultiSpecifierQualifierList() :{/*@bgen(jjtree) MultiSpecifierQualifierList */
  ASTMultiSpecifierQualifierList jjtn000 = (ASTMultiSpecifierQualifierList)ASTMultiSpecifierQualifierList.jjtCreate(this, JJTMULTISPECIFIERQUALIFIERLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) MultiSpecifierQualifierList */
  try {
/*@egen*/  MultiTypeSpecifier()  [    LOOKAHEAD(MultiSpecifierQualifierList())    MultiSpecifierQualifierList()  ]| TypeQualifier()  [    LOOKAHEAD(MultiSpecifierQualifierList())    MultiSpecifierQualifierList()  ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void StructDeclaratorList() :{/*@bgen(jjtree) StructDeclaratorList */
  ASTStructDeclaratorList jjtn000 = (ASTStructDeclaratorList)ASTStructDeclaratorList.jjtCreate(this, JJTSTRUCTDECLARATORLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) StructDeclaratorList */
  try {
/*@egen*/  StructDeclarator()  (    < COMMA > StructDeclarator()  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void StructDeclarator() :{/*@bgen(jjtree) StructDeclarator */
  ASTStructDeclarator jjtn000 = (ASTStructDeclarator)ASTStructDeclarator.jjtCreate(this, JJTSTRUCTDECLARATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) StructDeclarator */
  try {
/*@egen*/  (    LOOKAHEAD(3)    Declarator()  | [ Declarator() ] ":" ConstantExpression()  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void EnumSpecifier() :{/*@bgen(jjtree) EnumSpecifier */
  ASTEnumSpecifier jjtn000 = (ASTEnumSpecifier)ASTEnumSpecifier.jjtCreate(this, JJTENUMSPECIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) EnumSpecifier */
  try {
/*@egen*/  < ENUM >  (    LOOKAHEAD(3)    [ < IDENTIFIER > ] < LBRACE > EnumeratorList() < RBRACE >  | < IDENTIFIER >  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void EnumeratorList() :{/*@bgen(jjtree) EnumeratorList */
  ASTEnumeratorList jjtn000 = (ASTEnumeratorList)ASTEnumeratorList.jjtCreate(this, JJTENUMERATORLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) EnumeratorList */
  try {
/*@egen*/  Enumerator()  (    < COMMA > Enumerator()  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Enumerator() :{/*@bgen(jjtree) Enumerator */
  ASTEnumerator jjtn000 = (ASTEnumerator)ASTEnumerator.jjtCreate(this, JJTENUMERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Enumerator */
  try {
/*@egen*/  < IDENTIFIER > [ "=" ConstantExpression() ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Declarator() :{/*@bgen(jjtree) Declarator */
  ASTDeclarator jjtn000 = (ASTDeclarator)ASTDeclarator.jjtCreate(this, JJTDECLARATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Declarator */
  try {
/*@egen*/  [ Pointer() ] DirectDeclarator()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void ParameterDeclarator() :{/*@bgen(jjtree) ParameterDeclarator */
  ASTParameterDeclarator jjtn000 = (ASTParameterDeclarator)ASTParameterDeclarator.jjtCreate(this, JJTPARAMETERDECLARATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ParameterDeclarator */
  try {
/*@egen*/  (    [ Pointer() ]    (      VariableDirectDeclarator()    | FunctionPointerDirectDeclarator()    )  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void FunctionDeclarator() :{/*@bgen(jjtree) FunctionDeclarator */
  ASTFunctionDeclarator jjtn000 = (ASTFunctionDeclarator)ASTFunctionDeclarator.jjtCreate(this, JJTFUNCTIONDECLARATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) FunctionDeclarator */
  try {
/*@egen*/  (    [ Pointer() ] FunctionDirectDeclarator()  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void VariableDeclarator() :{/*@bgen(jjtree) VariableDeclarator */
  ASTVariableDeclarator jjtn000 = (ASTVariableDeclarator)ASTVariableDeclarator.jjtCreate(this, JJTVARIABLEDECLARATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) VariableDeclarator */
  try {
/*@egen*/  (    [ Pointer() ]    (      VariableDirectDeclarator()    | FunctionPointerDirectDeclarator()    )  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void DirectDeclarator() :{/*@bgen(jjtree) DirectDeclarator */
  ASTDirectDeclarator jjtn000 = (ASTDirectDeclarator)ASTDirectDeclarator.jjtCreate(this, JJTDIRECTDECLARATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;}{/*@bgen(jjtree) DirectDeclarator */
  try {
/*@egen*/  (    t = < IDENTIFIER >    {      if (!(typedefParsingStack.empty()) && ((Boolean) typedefParsingStack.peek()).booleanValue())      {        addType(t.image);      }    }  | < LPAREN > Declarator() < RPAREN >  )  {    typedefParsingStack.push(Boolean.FALSE);  }  (    < LBRACKET > [ ConstantExpression() ] < RBRACKET >  | LOOKAHEAD(3)    < LPAREN > ParameterTypeList() < RPAREN >  | < LPAREN > [ IdentifierList() ] < RPAREN >  )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    typedefParsingStack.pop();  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void FunctionDirectDeclarator() :{/*@bgen(jjtree) FunctionDirectDeclarator */
  ASTFunctionDirectDeclarator jjtn000 = (ASTFunctionDirectDeclarator)ASTFunctionDirectDeclarator.jjtCreate(this, JJTFUNCTIONDIRECTDECLARATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;}{/*@bgen(jjtree) FunctionDirectDeclarator */
  try {
/*@egen*/  (    t = < IDENTIFIER >    {      if (!(typedefParsingStack.empty()) && ((Boolean) typedefParsingStack.peek()).booleanValue())      {        addType(t.image);      }    }  )  {    typedefParsingStack.push(Boolean.FALSE);  }  (    < LBRACKET > [ ConstantExpression() ] < RBRACKET >  | LOOKAHEAD(3)    < LPAREN > ParameterTypeList() < RPAREN >  | < LPAREN > [ IdentifierList() ] < RPAREN >  )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    typedefParsingStack.pop();  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void FunctionPointerDirectDeclarator() :{/*@bgen(jjtree) FunctionPointerDirectDeclarator */
  ASTFunctionPointerDirectDeclarator jjtn000 = (ASTFunctionPointerDirectDeclarator)ASTFunctionPointerDirectDeclarator.jjtCreate(this, JJTFUNCTIONPOINTERDIRECTDECLARATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;}{/*@bgen(jjtree) FunctionPointerDirectDeclarator */
  try {
/*@egen*/  (    < LPAREN > Declarator() < RPAREN >  )  {    typedefParsingStack.push(Boolean.FALSE);  }  (    < LBRACKET > [ ConstantExpression() ] < RBRACKET >  | LOOKAHEAD(3)    < LPAREN > ParameterTypeList() < RPAREN >  | < LPAREN > [ IdentifierList() ] < RPAREN >  )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    typedefParsingStack.pop();  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void VariableDirectDeclarator() :{/*@bgen(jjtree) VariableDirectDeclarator */
  ASTVariableDirectDeclarator jjtn000 = (ASTVariableDirectDeclarator)ASTVariableDirectDeclarator.jjtCreate(this, JJTVARIABLEDIRECTDECLARATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;}{/*@bgen(jjtree) VariableDirectDeclarator */
  try {
/*@egen*/  (    t = < IDENTIFIER >    {      if (!(typedefParsingStack.empty()) && ((Boolean) typedefParsingStack.peek()).booleanValue())      {        addType(t.image);      }    }  )  {    typedefParsingStack.push(Boolean.FALSE);  }  (    < LBRACKET > [ ConstantExpression() ] < RBRACKET >  )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    typedefParsingStack.pop();  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Pointer() :{/*@bgen(jjtree) Pointer */
  ASTPointer jjtn000 = (ASTPointer)ASTPointer.jjtCreate(this, JJTPOINTER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Pointer */
  try {
/*@egen*/  "*" [ TypeQualifierList() ] [ Pointer() ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void TypeQualifierList() :{/*@bgen(jjtree) TypeQualifierList */
  ASTTypeQualifierList jjtn000 = (ASTTypeQualifierList)ASTTypeQualifierList.jjtCreate(this, JJTTYPEQUALIFIERLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) TypeQualifierList */
  try {
/*@egen*/  (    TypeQualifier()  )+/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void ParameterTypeList() :{/*@bgen(jjtree) ParameterTypeList */
  ASTParameterTypeList jjtn000 = (ASTParameterTypeList)ASTParameterTypeList.jjtCreate(this, JJTPARAMETERTYPELIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ParameterTypeList */
  try {
/*@egen*/  ParameterList() [ < COMMA > "..." ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void ParameterList() :{/*@bgen(jjtree) ParameterList */
  ASTParameterList jjtn000 = (ASTParameterList)ASTParameterList.jjtCreate(this, JJTPARAMETERLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ParameterList */
  try {
/*@egen*/  ParameterDeclaration()  (    LOOKAHEAD(2)    < COMMA > ParameterDeclaration()  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void ParameterDeclaration() :{/*@bgen(jjtree) ParameterDeclaration */
  ASTParameterDeclaration jjtn000 = (ASTParameterDeclaration)ASTParameterDeclaration.jjtCreate(this, JJTPARAMETERDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ParameterDeclaration */
  try {
/*@egen*/  DeclarationSpecifiers()  (    LOOKAHEAD(ParameterDeclarator())    ParameterDeclarator()  | [ AbstractDeclarator() ]  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void IdentifierList() :{/*@bgen(jjtree) IdentifierList */
  ASTIdentifierList jjtn000 = (ASTIdentifierList)ASTIdentifierList.jjtCreate(this, JJTIDENTIFIERLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) IdentifierList */
  try {
/*@egen*/  < IDENTIFIER > (< COMMA > < IDENTIFIER >)*/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Initializer() :{/*@bgen(jjtree) Initializer */
  ASTInitializer jjtn000 = (ASTInitializer)ASTInitializer.jjtCreate(this, JJTINITIALIZER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Initializer */
  try {
/*@egen*/  (    AssignmentExpression()  | < LBRACE > InitializerList() [ < COMMA > ] < RBRACE >  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void InitializerList() :{/*@bgen(jjtree) InitializerList */
  ASTInitializerList jjtn000 = (ASTInitializerList)ASTInitializerList.jjtCreate(this, JJTINITIALIZERLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) InitializerList */
  try {
/*@egen*/  Initializer()  (    LOOKAHEAD(2)    < COMMA > Initializer()  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void TypeName() :{/*@bgen(jjtree) TypeName */
  ASTTypeName jjtn000 = (ASTTypeName)ASTTypeName.jjtCreate(this, JJTTYPENAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) TypeName */
  try {
/*@egen*/  SpecifierQualifierList() [ AbstractDeclarator() ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void AbstractDeclarator() :{/*@bgen(jjtree) AbstractDeclarator */
  ASTAbstractDeclarator jjtn000 = (ASTAbstractDeclarator)ASTAbstractDeclarator.jjtCreate(this, JJTABSTRACTDECLARATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) AbstractDeclarator */
  try {
/*@egen*/  (    LOOKAHEAD(3)    Pointer()  | [ Pointer() ] DirectAbstractDeclarator()  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void DirectAbstractDeclarator() :{/*@bgen(jjtree) DirectAbstractDeclarator */
  ASTDirectAbstractDeclarator jjtn000 = (ASTDirectAbstractDeclarator)ASTDirectAbstractDeclarator.jjtCreate(this, JJTDIRECTABSTRACTDECLARATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) DirectAbstractDeclarator */
  try {
/*@egen*/  (    LOOKAHEAD(2)    < LPAREN > AbstractDeclarator() < RPAREN >  | < LBRACKET > [ ConstantExpression() ] < RBRACKET >  | < LPAREN > [ ParameterTypeList() ] < RPAREN >  )  (    < LBRACKET > [ ConstantExpression() ] < RBRACKET >  | < LPAREN > [ ParameterTypeList() ] < RPAREN >  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void TypedefName() :{/*@bgen(jjtree) TypedefName */
  ASTTypedefName jjtn000 = (ASTTypedefName)ASTTypedefName.jjtCreate(this, JJTTYPEDEFNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) TypedefName */
  try {
/*@egen*/  < IDENTIFIER >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Statement() :{/*@bgen(jjtree) Statement */
  ASTStatement jjtn000 = (ASTStatement)ASTStatement.jjtCreate(this, JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Statement */
  try {
/*@egen*/  (    LOOKAHEAD(2)    LabeledStatement()  | ExpressionStatement()  | CompoundStatement()  | SelectionStatement()  | IterationStatement()  | JumpStatement()  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void LabeledStatement() :{/*@bgen(jjtree) LabeledStatement */
  ASTLabeledStatement jjtn000 = (ASTLabeledStatement)ASTLabeledStatement.jjtCreate(this, JJTLABELEDSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) LabeledStatement */
  try {
/*@egen*/  (    < IDENTIFIER > ":" Statement()  | < CASE > ConstantExpression() ":" Statement()  | < DFLT > ":" Statement()  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void ExpressionStatement() :{/*@bgen(jjtree) ExpressionStatement */
  ASTExpressionStatement jjtn000 = (ASTExpressionStatement)ASTExpressionStatement.jjtCreate(this, JJTEXPRESSIONSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ExpressionStatement */
  try {
/*@egen*/  [ Expression() ] < SEMICOLON >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void CompoundStatement() :{/*@bgen(jjtree) CompoundStatement */
  ASTCompoundStatement jjtn000 = (ASTCompoundStatement)ASTCompoundStatement.jjtCreate(this, JJTCOMPOUNDSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) CompoundStatement */
  try {
/*@egen*/  < LBRACE >  [    LOOKAHEAD(DeclarationList())    DeclarationList()  ]  [ StatementList() ] < RBRACE >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void StatementList() :{/*@bgen(jjtree) StatementList */
  ASTStatementList jjtn000 = (ASTStatementList)ASTStatementList.jjtCreate(this, JJTSTATEMENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) StatementList */
  try {
/*@egen*/  (    Statement()  )+/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void SelectionStatement() :{/*@bgen(jjtree) SelectionStatement */
  ASTSelectionStatement jjtn000 = (ASTSelectionStatement)ASTSelectionStatement.jjtCreate(this, JJTSELECTIONSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) SelectionStatement */
  try {
/*@egen*/  (    < IF > < LPAREN > Expression() < RPAREN > Statement()    [      LOOKAHEAD(2)      < ELSE > Statement()    ]  | < SWITCH > < LPAREN > Expression() < RPAREN > Statement()  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void IterationStatement() :{/*@bgen(jjtree) IterationStatement */
  ASTIterationStatement jjtn000 = (ASTIterationStatement)ASTIterationStatement.jjtCreate(this, JJTITERATIONSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) IterationStatement */
  try {
/*@egen*/  (    < WHILE > < LPAREN > Expression() < RPAREN > Statement()  | < DO > Statement() < WHILE > < LPAREN > Expression() < RPAREN > < SEMICOLON >  | < FOR > < LPAREN > [ Expression() ] < SEMICOLON > [ Expression() ] < SEMICOLON > [ Expression() ] < RPAREN > Statement()  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void JumpStatement() :{/*@bgen(jjtree) JumpStatement */
  ASTJumpStatement jjtn000 = (ASTJumpStatement)ASTJumpStatement.jjtCreate(this, JJTJUMPSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) JumpStatement */
  try {
/*@egen*/  (    < GOTO > < IDENTIFIER > < SEMICOLON >  | < CONTINUE > < SEMICOLON >  | < BREAK > < SEMICOLON >  | < RETURN > [ Expression() ] < SEMICOLON >  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Expression() :{/*@bgen(jjtree) Expression */
  ASTExpression jjtn000 = (ASTExpression)ASTExpression.jjtCreate(this, JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Expression */
  try {
/*@egen*/  AssignmentExpression()  (    < COMMA > AssignmentExpression()  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void AssignmentExpression() :{/*@bgen(jjtree) AssignmentExpression */
  ASTAssignmentExpression jjtn000 = (ASTAssignmentExpression)ASTAssignmentExpression.jjtCreate(this, JJTASSIGNMENTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) AssignmentExpression */
  try {
/*@egen*/  LOOKAHEAD(UnaryExpression() AssignmentOperator())  UnaryExpression() AssignmentOperator() AssignmentExpression()| LOOKAHEAD(3)  ConditionalExpression()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void AssignmentOperator() :{/*@bgen(jjtree) AssignmentOperator */
  ASTAssignmentOperator jjtn000 = (ASTAssignmentOperator)ASTAssignmentOperator.jjtCreate(this, JJTASSIGNMENTOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) AssignmentOperator */
  try {
/*@egen*/  (    "="  | "*="  | "/="  | "%="  | "+="  | "-="  | "<<="  | ">>="  | "&="  | "^="  | "|="  )/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void ConditionalExpression() :{/*@bgen(jjtree) ConditionalExpression */
  ASTConditionalExpression jjtn000 = (ASTConditionalExpression)ASTConditionalExpression.jjtCreate(this, JJTCONDITIONALEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ConditionalExpression */
  try {
/*@egen*/  LogicalORExpression() [ "?" Expression() ":" ConditionalExpression() ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void ConstantExpression() :{/*@bgen(jjtree) ConstantExpression */
  ASTConstantExpression jjtn000 = (ASTConstantExpression)ASTConstantExpression.jjtCreate(this, JJTCONSTANTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ConstantExpression */
  try {
/*@egen*/  ConditionalExpression()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void LogicalORExpression() :{/*@bgen(jjtree) LogicalORExpression */
  ASTLogicalORExpression jjtn000 = (ASTLogicalORExpression)ASTLogicalORExpression.jjtCreate(this, JJTLOGICALOREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) LogicalORExpression */
  try {
/*@egen*/  LogicalANDExpression() [ "||" LogicalORExpression() ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void LogicalANDExpression() :{/*@bgen(jjtree) LogicalANDExpression */
  ASTLogicalANDExpression jjtn000 = (ASTLogicalANDExpression)ASTLogicalANDExpression.jjtCreate(this, JJTLOGICALANDEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) LogicalANDExpression */
  try {
/*@egen*/  InclusiveORExpression() [ "&&" LogicalANDExpression() ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void InclusiveORExpression() :{/*@bgen(jjtree) InclusiveORExpression */
  ASTInclusiveORExpression jjtn000 = (ASTInclusiveORExpression)ASTInclusiveORExpression.jjtCreate(this, JJTINCLUSIVEOREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) InclusiveORExpression */
  try {
/*@egen*/  ExclusiveORExpression() [ "|" InclusiveORExpression() ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void ExclusiveORExpression() :{/*@bgen(jjtree) ExclusiveORExpression */
  ASTExclusiveORExpression jjtn000 = (ASTExclusiveORExpression)ASTExclusiveORExpression.jjtCreate(this, JJTEXCLUSIVEOREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ExclusiveORExpression */
  try {
/*@egen*/  ANDExpression() [ "^" ExclusiveORExpression() ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void ANDExpression() :{/*@bgen(jjtree) ANDExpression */
  ASTANDExpression jjtn000 = (ASTANDExpression)ASTANDExpression.jjtCreate(this, JJTANDEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ANDExpression */
  try {
/*@egen*/  EqualityExpression() [ "&" ANDExpression() ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void EqualityExpression() :{/*@bgen(jjtree) EqualityExpression */
  ASTEqualityExpression jjtn000 = (ASTEqualityExpression)ASTEqualityExpression.jjtCreate(this, JJTEQUALITYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) EqualityExpression */
  try {
/*@egen*/  RelationalExpression()  [    (      "=="    | "!="    )    EqualityExpression()  ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void RelationalExpression() :{/*@bgen(jjtree) RelationalExpression */
  ASTRelationalExpression jjtn000 = (ASTRelationalExpression)ASTRelationalExpression.jjtCreate(this, JJTRELATIONALEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) RelationalExpression */
  try {
/*@egen*/  ShiftExpression()  [    (      "<"    | ">"    | "<="    | ">="    )    RelationalExpression()  ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void ShiftExpression() :{/*@bgen(jjtree) ShiftExpression */
  ASTShiftExpression jjtn000 = (ASTShiftExpression)ASTShiftExpression.jjtCreate(this, JJTSHIFTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ShiftExpression */
  try {
/*@egen*/  AdditiveExpression()  [    (      "<<"    | ">>"    )    ShiftExpression()  ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void AdditiveExpression() :{/*@bgen(jjtree) AdditiveExpression */
  ASTAdditiveExpression jjtn000 = (ASTAdditiveExpression)ASTAdditiveExpression.jjtCreate(this, JJTADDITIVEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) AdditiveExpression */
  try {
/*@egen*/  MultiplicativeExpression()  [    (      "+"    | "-"    )    AdditiveExpression()  ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void MultiplicativeExpression() :{/*@bgen(jjtree) MultiplicativeExpression */
  ASTMultiplicativeExpression jjtn000 = (ASTMultiplicativeExpression)ASTMultiplicativeExpression.jjtCreate(this, JJTMULTIPLICATIVEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) MultiplicativeExpression */
  try {
/*@egen*/  CastExpression()  [    (      "*"    | "/"    | "%"    )    MultiplicativeExpression()  ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void CastExpression() :{/*@bgen(jjtree) CastExpression */
  ASTCastExpression jjtn000 = (ASTCastExpression)ASTCastExpression.jjtCreate(this, JJTCASTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) CastExpression */
  try {
/*@egen*/  (    LOOKAHEAD(< LPAREN > TypeName() < RPAREN > CastExpression())    < LPAREN > TypeName() < RPAREN > CastExpression()  | UnaryExpression()  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void UnaryExpression() :{/*@bgen(jjtree) UnaryExpression */
  ASTUnaryExpression jjtn000 = (ASTUnaryExpression)ASTUnaryExpression.jjtCreate(this, JJTUNARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) UnaryExpression */
  try {
/*@egen*/  (    LOOKAHEAD(3)    PostfixExpression()  | "++" UnaryExpression()  | "--" UnaryExpression()  | UnaryOperator() CastExpression()  | < SIZEOF >    (      LOOKAHEAD(UnaryExpression())      UnaryExpression()    | < LPAREN > TypeName() < RPAREN >    )  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void UnaryOperator() :{/*@bgen(jjtree) UnaryOperator */
  ASTUnaryOperator jjtn000 = (ASTUnaryOperator)ASTUnaryOperator.jjtCreate(this, JJTUNARYOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) UnaryOperator */
  try {
/*@egen*/  (    "&"  | "*"  | "+"  | "-"  | "~"  | "!"  )/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void PostfixExpression() :{/*@bgen(jjtree) PostfixExpression */
  ASTPostfixExpression jjtn000 = (ASTPostfixExpression)ASTPostfixExpression.jjtCreate(this, JJTPOSTFIXEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) PostfixExpression */
  try {
/*@egen*/  PrimaryExpression()  (    < LBRACKET > Expression() < RBRACKET >  | < LPAREN >    [      LOOKAHEAD(ArgumentExpressionList())      ArgumentExpressionList()    ]    < RPAREN >  | "." < IDENTIFIER >  | "->" < IDENTIFIER >  | "++"  | "--"  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void PrimaryExpression() :{/*@bgen(jjtree) PrimaryExpression */
  ASTPrimaryExpression jjtn000 = (ASTPrimaryExpression)ASTPrimaryExpression.jjtCreate(this, JJTPRIMARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) PrimaryExpression */
  try {
/*@egen*/  (    < IDENTIFIER >  | Constant()  | < LPAREN > Expression() < RPAREN >  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void ArgumentExpressionList() :{/*@bgen(jjtree) ArgumentExpressionList */
  ASTArgumentExpressionList jjtn000 = (ASTArgumentExpressionList)ASTArgumentExpressionList.jjtCreate(this, JJTARGUMENTEXPRESSIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ArgumentExpressionList */
  try {
/*@egen*/  AssignmentExpression()  (    < COMMA > AssignmentExpression()  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Constant() :{/*@bgen(jjtree) Constant */
  ASTConstant jjtn000 = (ASTConstant)ASTConstant.jjtCreate(this, JJTCONSTANT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Constant */
  try {
/*@egen*/  < INTEGER_LITERAL >| < FLOATING_POINT_LITERAL >| < CHARACTER_LITERAL >| < STRING_LITERAL >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}